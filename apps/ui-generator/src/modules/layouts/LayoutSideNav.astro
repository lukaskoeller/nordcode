---

---


<nav class="preview-sidenav layout-nav nc-region content-block">
    <ul class="nc-list-reset nc-stack"></ul>
    <template id="link-template">
        <li>
            <a href=""></a>
        </li>
    </template>
</nav>

<script>
    const linkContainer = document.querySelector('.preview-sidenav ul');
    const linkTemplate = document.getElementById('link-template');
    const sections = document.querySelectorAll('.section-to-observe');
    const options = {
        // root is only required because this sandbox is in an iframe.
        root: document,
        rootMargin: '-50% 0px',
        threshold: 0,
    };
    const HIGHLIGHT_CLASS = '-highlight';

    const tableOfContentsMap = {};

    function removeHighlight(id) {
        tableOfContentsMap[id].classList.remove(HIGHLIGHT_CLASS);
        tableOfContentsMap[id].removeAttribute("aria-current");
    }

    function addHighlight(id) {
        tableOfContentsMap[id].classList.add(HIGHLIGHT_CLASS);
        tableOfContentsMap[id].setAttribute("aria-current", "true");

    }

    function onObserve(entries, _) {
        entries.forEach(entry => {
            const { id } = entry.target;

            if (entry.isIntersecting) {
                addHighlight(id);
            } else {
                const { id } = entry.target;
                removeHighlight(id);
            }
        });
    }

    const observer = new IntersectionObserver(onObserve, options);

    sections.forEach(section => {
        const sectionLink = section.querySelector(".anchor-link")
        const newLink = linkTemplate.content.cloneNode(true);
        const newLinkElement = newLink.querySelector('a');
        newLinkElement.href = sectionLink;
        newLinkElement.textContent = `.${section.id}`;
        tableOfContentsMap[section.id] =newLinkElement;
        linkContainer.appendChild(newLink);
        observer.observe(section);
    });
</script>
