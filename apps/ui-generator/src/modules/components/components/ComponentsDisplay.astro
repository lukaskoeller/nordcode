---
import buttonIcon from '../examples/button/buttonIcon.html?raw';
import inputBase from '../examples/input/inputBase.html?raw';
import inputDate from '../examples/input/inputDate.html?raw';
import inputRange from '../examples/input/inputRange.html?raw';
import inputSelect from '../examples/input/inputSelect.html?raw';
import inputTextarea from '../examples/input/inputTextarea.html?raw';
import inputCheckbox from '../examples/input/inputCheckbox.html?raw';
import fieldsetBase from '../examples/fieldset/fieldsetBase.html?raw';
import fieldsetStandard from '../examples/fieldset/fieldsetStandard.html?raw';
import fieldsetWithH1 from '../examples/fieldset/fieldsetWithH1.html?raw';
import tableStandard from '../examples/table/tableStandard.html?raw';
import metaList from '../examples/lists/metalist.html?raw';
import tableHorizontal from '../examples/table/tableHorizontal.html?raw';
import { Code } from 'astro:components';
import ComponentPreview from './ComponentPreview.astro';
import SectionTitle from './SectionTitle.astro';
import { slugify } from '../../common/utils/slugify';

const idxToDisplayNumber = (num: number, nestedNum?: number): string => {
    const firstPart = (num + 1).toString().padStart(2, '0');
    const secondPart =
        nestedNum !== undefined ? `.${(nestedNum + 1).toString().padStart(2, '0')}` : '';

    return firstPart + secondPart;
};

/*
 * - Im Nav: 02: Buttons -> 02.01: Icon Button + link #02.01:icon-button = slugify(title)
 * - Im Title:
 *
 */

interface Component {
    title: string;
    description?: string;
    component: string;
    notes?: Array<string>;
    examples?: Array<{
        title: string;
        description?: string;
        code: string;
    }>;
}

interface Section {
    title: string;
    components: Array<Component>;
}

const sections: Array<Section> = [
    {
        title: 'Buttons',
        components: [
            {
                title: 'Icon Button',
                description: 'An icon-only button for when you want a more minimal interface.',
                component: buttonIcon as string,
                notes: [
                    "Make sure to set the icon to aria-hidden, so the content isn't read to screen reader users",
                    'Also add a screen-reader only label',
                ],
            } as Component,
        ],
    },
    {
        title: 'Form Elements',
        components: [
            {
                title: 'Fieldset',
                component: fieldsetBase as string,
                description:
                    'Used to group inputs that belong together. Mandatory for radio-inputs. Can have a hint to describe what it is about.',
                examples: [
                    {
                        title: 'Standard Fieldset',
                        description:
                            'A more practical example with inputs and a box around it for design purposes.',
                        code: fieldsetStandard as string,
                    },
                    {
                        title: 'Fieldset for single question pages',
                        description: 'You can nest an h1 in the legend like this.',
                        code: fieldsetWithH1 as string,
                    },
                ],
            } as Component,
            {
                title: 'Input Fields',
                component: inputBase as string,
                description: 'The classic input with a label and optional hint(s) and error(s).',
                notes: [
                    'Ideally, mark labels and inputs as optional and set aria-required="false"',
                    'You can set min and max-widths globally using --input-field-min-inline-size and --input-field-max-inline-size',
                ],
                examples: [
                    {
                        title: 'Checkbox Input',
                        description: 'A standard checkbox input.',
                        code: inputCheckbox as string,
                    },
                    {
                        title: 'Date Input',
                        description:
                            'Date Inputs can have a little button next to them to make it easier to set the date. You do have to hook up the logic, though.',
                        code: inputDate as string,
                    },
                    {
                        title: 'Range Input',
                        description:
                            'It is nice to display the range value below, we think. You need to keep it in sync yourself though.',
                        code: inputRange as string,
                    },
                    {
                        title: 'Select',
                        description:
                            'Selects are useful for when you have more than 5 items, but still a managable amount.',
                        code: inputSelect as string,
                    },
                    {
                        title: 'Textarea',
                        description: 'Need more space? Use a textarea.',
                        code: inputTextarea as string,
                    },
                ],
            } as Component,
        ],
    },
    {
        title: 'Data Display',
        components: [
            {
                title: 'Meta List',
                component: metaList as string,
                description: 'Display tags and meta data for posts and alike.',
            },
            {
                title: 'Tables',
                component: tableStandard,
                description: "It's a table. It's good for displaying lots of data in columns.",
                notes: [
                    'Make sure all data is visible in all responsive setups. We do that using a scroll.',
                    'You can change the background-color using --nc-table-background-lch',
                ],
                examples: [
                    {
                        title: 'Horizontal Table',
                        description:
                            'Sometimes tables make more sense to be horizontal. This is how you do it.',
                        code: tableHorizontal,
                    },
                ],
            },
        ],
    },
];

interface SmarterComponent extends Component {
    titleWithNumber: string;
    sectionId: string;
}

interface SmarterSection extends Omit<Section, 'components'> {
    titleWithNumber: string;
    sectionId: string;
    components: Array<SmarterComponent>;
}

const smarterSections = sections.map((sect, idx) => {
    return {
        ...sect,
        titleWithNumber: `${idxToDisplayNumber(idx)}: ${sect.title}`,
        sectionId: slugify(`${idxToDisplayNumber(idx)}: ${sect.title}`),
        components: sect.components.map((comp, compIdx) => {
            return {
                ...comp,
                titleWithNumber: `${idxToDisplayNumber(idx, compIdx)}: ${comp.title}`,
                sectionId: slugify(`${idxToDisplayNumber(idx, compIdx)}: ${comp.title}`),
            };
        }),
    };
});
---

<div class="nc-with-sidebar components-preview">
    <div data-aside>
        <nav class="component-nav">
            <ul class="nc-list-reset">
                {
                    smarterSections.map(sect => (
                        <li>
                            <a href={`#${sect.sectionId}`} class="comp-link">
                                {sect.titleWithNumber}
                            </a>
                            <ul class="nc-list-reset">
                                {sect.components.map(comp => (
                                    <li>
                                        <a href={`#${comp.sectionId}`} class="comp-link">
                                            {comp.titleWithNumber}
                                        </a>
                                    </li>
                                ))}
                            </ul>
                        </li>
                    ))
                }
            </ul>
        </nav>
    </div>
    <div class="nc-stack -far -stretched" data-grow>
        <h1>Components</h1>

        {
            smarterSections.map(section => (
                <section
                    class="nc-stack -base -stretched section-to-observe"
                    id={section.sectionId}
                >
                    <SectionTitle title={section.titleWithNumber} />
                    {section.components.map(formEl => (
                        <ComponentPreview
                            component={formEl.component}
                            title={formEl.titleWithNumber}
                            description={formEl.description}
                            examples={formEl.examples}
                            notes={formEl.notes}
                            sectionId={formEl.sectionId}
                        />
                    ))}
                </section>
            ))
        }
    </div>
</div>

<style>
    .components-preview {
        --input-field-min-inline-size: 40ch;
        --input-field-max-inline-size: 40ch;
        --with-sidebar-min-size: 70%;

        align-items: stretch;
    }

    .component-nav {
        padding-inline: var(--spacing-base);
        min-width: 12rem;
        position: sticky;
        top: 0;

        & ul {
            gap: var(--spacing-nearest);
        }

        & li > ul {
            margin-block-start: var(--spacing-nearest);
        }

        & a {
            position: relative;
            display: flex;
            align-items: center;

            &:before {
                color: var(--color-text-muted);
                font-size: 0.75rem;
                right: 100%;
                content: 'â–º';
                transform: translate(-0.5rem);
                opacity: 0;
                transition: all var(--transition-duration-base) var(--ease-in-2);
                position: absolute;
            }
        }

        & a.-highlight {
            color: var(--color-brand-primary-base);

            &:before {
                transform: translate(-0.25rem);
                opacity: 1;
                transition: all var(--transition-duration-base) var(--ease-out-2);
            }
        }
    }
</style>

<script>
    const links = document.querySelectorAll('.comp-link');
    const sections = document.querySelectorAll('.section-to-observe');
    const options = {
        // root is only required because this sandbox is in an iframe.
        root: document,
        rootMargin: '-50% 0px',
        threshold: 0,
    };
    const HIGHLIGHT_CLASS = '-highlight';
    const tableOfContentsMap = [...sections].reduce((acc, section, i) => {
        return {
            ...acc,
            [section.id]: links[i],
        };
    }, {});

    function removeHighlight(id) {
        tableOfContentsMap[id].classList.remove(HIGHLIGHT_CLASS);
    }

    function addHighlight(id) {
        tableOfContentsMap[id].classList.add(HIGHLIGHT_CLASS);
    }

    function onObserve(entries, _) {
        entries.forEach(entry => {
            const { id } = entry.target;

            if (entry.isIntersecting) {
                addHighlight(id);
            } else {
                const { id } = entry.target;
                removeHighlight(id);
            }
        });
    }

    const observer = new IntersectionObserver(onObserve, options);

    sections.forEach(section => {
        observer.observe(section);
    });
</script>
