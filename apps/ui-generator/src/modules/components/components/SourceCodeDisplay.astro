---
import { Code } from 'astro:components';
interface Props {
    code: string;
    title: string;
    requirements?: string[];
    codepenUrl: string;
    lang?: string;
}

const { code, title, lang = 'html', codepenUrl, requirements } = Astro.props;

const requirementsCode = requirements ? requirements.map(req => `@import "${req}"`).join(';\n') : ""
---

<div class="source-code">
    <header class="nc-cluster -centered -between sc-header">
        <div class="nc-cluster -centered">
            <p><strong>{title}</strong></p>
            <span> - </span>
            <span class="nc-slub">{lang}</span>
        </div>
        <div class="nc-cluster -centered">

        {codepenUrl ? <a href={codepenUrl} target="_blank" rel="noreferrer noopener" class="nc-button -outline">Open in CodePen</a> : null}

        {requirementsCode ?
        <button class="nc-button -outline"
        data-copy-target={requirementsCode}
        data-has-notification
        data-notification-title="✓ To clipboard"
        data-notification-description={`Copied ${title}'s requirements to your clipboard.`}
        >Copy requirements</button>
        : null}

        <button
                type="button"
                class="nc-button -outline"
                data-copy-target={code}
                data-has-notification
                data-notification-title="✓ To clipboard"
                data-notification-description={`Copied ${title}'s code to your clipboard.`}
            >
                Copy code
            </button>
        </div>
    </header>
    <Code
        code={code}
        lang="html"
        themes={{
            light: 'vitesse-light',
            dark: 'vitesse-dark',
        }}
        defaultColor={'light'}
        id="code-preview"
        class={"code-preview"}
    />
    {requirementsCode ? (
<Code
    code={`/* Minimum CSS for ${title} */
${requirementsCode}`}
    lang="css"
    themes={{
        light: 'vitesse-light',
        dark: 'vitesse-dark',
    }}
    defaultColor={'light'}
    class={"code-preview"}
/>
    ) : null}
</div>

<style is:global>
    .source-code {
        position: relative;
        inline-size: 100%;
    }

    .source-code > * {
        border-radius: 0;
    }


    .sc-header {
        border: var(--border-width-medium) solid var(--color-border-base);
        border-radius: var(--border-radius-medium);
        background: var(--color-surface-subtle);
        padding: 0.5lh 2ch;
        border-block-end: none;
        border-radius: var(--border-radius-medium) var(--border-radius-medium) 0 0;
    }


    .source-code > *:last-child {
        border-block-start: none;
        border-radius: 0 0 var(--border-radius-medium) var(--border-radius-medium);
    }

    @media (prefers-color-scheme: dark) {
        html:not([data-theme='light']) {
            .code-preview,
            .code-preview span {
                color: var(--shiki-dark) !important;
                background-color: var(--shiki-dark-bg) !important;
                /* Optional, if you also want font styles */
                font-style: var(--shiki-dark-font-style) !important;
                font-weight: var(--shiki-dark-font-weight) !important;
                text-decoration: var(--shiki-dark-text-decoration) !important;
            }
        }
    }

    html[data-theme='dark'] {
        .code-preview,
        .code-preview span {
            color: var(--shiki-dark) !important;
            background-color: var(--shiki-dark-bg) !important;
            /* Optional, if you also want font styles */
            font-style: var(--shiki-dark-font-style) !important;
            font-weight: var(--shiki-dark-font-weight) !important;
            text-decoration: var(--shiki-dark-text-decoration) !important;
        }
    }
</style>
