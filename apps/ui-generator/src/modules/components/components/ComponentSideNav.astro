---
import type { SmarterSection } from './sections';
interface Props {
    sections: SmarterSection[];
}

const { sections } = Astro.props;
---

<style>
    .component-nav {
        min-width: 12rem;
        inline-size: 100%;
        margin-inline: var(--spacing-base);

        & li > ul {
            padding-inline-start: 1ch;
        }

        & li > ul > li:first-child {
            margin-block-start: var(--spacing-near);
        }

        & a {
            position: relative;
            display: flex;
            align-items: center;

            &:before {
                color: var(--color-text-muted);
                font-size: 0.75rem;
                right: 100%;
                content: 'â–º';
                transform: translate(-0.5rem);
                opacity: 0;
                transition: all var(--transition-duration-base) var(--ease-in-2);
                position: absolute;
            }
        }

        & a.-highlight {
            color: var(--color-brand-primary-base);

            &:before {
                transform: translate(-0.25rem);
                opacity: 1;
                transition: all var(--transition-duration-base) var(--ease-out-2);
            }
        }
    }
</style>

<nav class="component-nav nc-region content-block">
    <ul class="nc-list-reset nc-stack">
        {
            sections.map(sect => (
                <li>
                    <a href={`#${sect.sectionId}`} class="comp-link">
                        {sect.titleWithNumber}
                    </a>
                    <ul class="nc-list-reset nc-stack -near">
                        {sect.components.map(comp => (
                            <li>
                                <a href={`#${comp.sectionId}`} class="comp-link">
                                    {comp.titleWithNumber}
                                </a>
                            </li>
                        ))}
                    </ul>
                </li>
            ))
        }
    </ul>
</nav>

<script>
    document.addEventListener('astro:page-load', () => {
        const links = document.querySelectorAll('.comp-link');
        const sections = document.querySelectorAll('.section-to-observe');
        const options = {
            // root is only required because this sandbox is in an iframe.
            root: document,
            rootMargin: '-50% 0px',
            threshold: 0,
        };
        const HIGHLIGHT_CLASS = '-highlight';
        const tableOfContentsMap = [...sections].reduce((acc, section, i) => {
            return {
                ...acc,
                [section.id]: links[i],
            };
        }, {});

        function removeHighlight(id) {
            tableOfContentsMap[id].classList.remove(HIGHLIGHT_CLASS);
        }

        function addHighlight(id) {
            tableOfContentsMap[id].classList.add(HIGHLIGHT_CLASS);
        }

        function onObserve(entries, _) {
            entries.forEach(entry => {
                const { id } = entry.target;

                if (entry.isIntersecting) {
                    addHighlight(id);
                } else {
                    const { id } = entry.target;
                    removeHighlight(id);
                }
            });
        }

        const observer = new IntersectionObserver(onObserve, options);

        sections.forEach(section => {
            observer.observe(section);
        });
    });
</script>
