@layer utils {
    /* Layout classes that handle 80% of the layout*/
    .nc-box {
        padding: var(--spacing-base);

        &.-bordered {
            border: var(--border-width-thin) solid var(--color-border-default);
            border-radius: var(--border-radius-medium);
        }
    }

    .nc-stack {
        display: flex;
        flex-direction: column;
        gap: var(--spacing-base);
        align-items: flex-start;

        &.-inherit {
            gap: var(--stack-gap, var(--spacing-base));
        }

        &.-stretched {
            inline-size: 100%;

            & > * {
                inline-size: 100%;
            }
        }
    }

    .nc-flow > * + * {
        margin-block-start: var(--flow-gap, var(--spacing-base));
    }

    .nc-flow > *:is(h1, h2, h3, h4, h5, h6, blockquote, .note) {
        --flow-gap: var(--spacing-far);
    }

    .nc-flow > *:is(h1, h2, h3, h4, h5, h6) + p {
        --flow-gap: var(--spacing-near);
    }

    .nc-flow > p + p {
        --flow-gap: var(--spacing-base);
    }

    .nc-flow > figure {
        margin-inline: 0;
    }

    .nc-flow .breakAfter {
        margin-block-end: auto;
    }

    .nc-center {
        box-sizing: content-box;
        margin-inline: auto;
        max-inline-size: var(--center-measure, 0);
        padding-inline: var(--center-measure, 0);
    }

    .nc-cluster {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        gap: var(--spacing-base);
        align-items: flex-start;

        &.-inherit {
            gap: var(--cluster-gap, var(--spacing-base));
        }

        &.-centered {
            align-items: center;
        }

        &.-nowrap {
            flex-wrap: nowrap;
        }
    }

    .nc-with-sidebar {
        --with-sidebar-min-size: 50%;

        width: 100%;
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        gap: var(--spacing-far);

        & > [data-aside] {
            flex-grow: 1;
            min-width: min-content;
        }

        & > [data-grow] {
            flex-basis: 0;
            flex-grow: 999;
            min-width: var(--with-sidebar-min-size);
        }

        &.-inherit {
            gap: var(--with-sidebar-gap, var(--spacing-far));
        }
    }

    :where(.nc-stack, .nc-cluster, .nc-with-sidebar) {
        &.-tiny {
            gap: var(--spacing-tiny);
        }

        &.-nearest {
            gap: var(--spacing-nearest);
        }

        &.-near {
            gap: var(--spacing-near);
        }

        &.-base {
            gap: var(--spacing-base);
        }

        &.-far {
            gap: var(--spacing-far);
        }

        &.-farthest {
            gap: var(--spacing-farthest);
        }

        &.-nogap {
            gap: 0;
        }
    }

    .full-width {
        inline-size: 100%;
    }

    .nc-centered-content {
        display: grid;
        place-items: center;
    }
}
