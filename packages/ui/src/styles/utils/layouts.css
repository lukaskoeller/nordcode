@layer utils {
    /* Layout classes that handle 80% of the layout*/
    .box {
        padding: var(--spacing-base);
    }

    .stack {
        display: flex;
        flex-direction: column;
        gap: var(--gap, var(--spacing-base));
        grid-template-columns: minmax(0, 1fr);
        align-items: flex-start;
    }

    .stack.-stretched {
        inline-size: 100%;

        & > * {
            inline-size: 100%;
        }
    }

    .flow > * + * {
        margin-block-start: var(--gap, var(--spacing-base));
    }

    .flow > *:is(h1,h2,h3,h4,h5,h6) {
        --gap: var(--spacing-far);
    }

    .flow > *:is(h1,h2,h3,h4,h5,h6) + p {
        --gap: var(--spacing-near);
    }

    .flow > p + p {
        --gap: var(--spacing-base);
    }

    .flow > figure {
        margin-inline: 0;
    }

    .flow .breakAfter {
        margin-block-end: auto;
    }

    .section {
        padding-block: var(--spacing-far);
    }

    .layout-container {
        margin-inline: auto;
        inline-size: 100%;
        max-inline-size: var(--layout-max-width);
        padding-inline: var(--layout-padding);
        display: grid;
        justify-items: start;

        & > * {
            min-inline-size: 0;
        }
    }

    .cluster {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        gap: var(--gap, var(--spacing-base));
        align-items: flex-start;

        &.-centered {
            align-items: center;
        }
    }


    .-layout-farthest {
        --gap: var(--spacing-farthest);
    }

    .-layout-far {
        --gap: var(--spacing-far);
    }

    .-layout-base {
        --gap: var(--spacing-base);
    }

    .-layout-near {
        --gap: var(--spacing-near);
    }

    .-layout-nearest {
        --gap: var(--spacing-nearest);
    }

    .-layout-tiny {
        --gap: var(--spacing-tiny);
    }

    .-layout-none {
        --gap: 0;
    }

    .layout-reset {
        --gap: unset;
    }

    .-full-width {
        inline-size: 100%;
    }

}
