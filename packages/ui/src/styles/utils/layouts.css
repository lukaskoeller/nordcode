@layer utils {
    /* Layout classes that handle 80% of the layout*/
    .nc-box {
        padding: var(--spacing-base);

        &.-bordered {
            border: var(--border-width-thin) solid var(--color-border-default);
            border-radius: var(--border-radius-medium);
        }
    }

    .nc-stack {
        display: flex;
        flex-direction: column;
        gap: var(--spacing-base);
        align-items: flex-start;

        &.-inherit {
            gap: var(--stack-gap, var(--spacing-base));
        }

        &.-stretched {
            inline-size: 100%;

            & > * {
                inline-size: 100%;
            }
        }

        &.-contained > * {
            max-inline-size: 100%;
        }
    }

    .nc-flow > * + * {
        margin-block-start: var(--flow-gap, var(--spacing-base));
    }

    .nc-flow > *:is(h1, h2, h3, h4, h5, h6, blockquote, .note) {
        --flow-gap: var(--spacing-far);
    }

    .nc-flow > *:is(h1, h2, h3, h4, h5, h6) + p {
        --flow-gap: var(--spacing-near);
    }

    .nc-flow > p + p {
        --flow-gap: var(--spacing-base);
    }

    .nc-flow > figure {
        margin-inline: 0;
    }

    .nc-flow .breakAfter {
        margin-block-end: auto;
    }

    /**
     * Center your content.
     * Can be used as a layout wrapper.
     */
    .nc-center {
        box-sizing: content-box;
        margin-inline: auto;
        max-inline-size: var(--center-measure, 0);
        padding-inline: var(--center-padding, 0);
        position: relative;
    }

    /**
      A consistently spaced section to bring some white space to your blocks.
     */
    .nc-region {
        padding-block: var(--region-space, var(--spacing-farthest));
    }

    .nc-cluster {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        gap: var(--spacing-base);
        align-items: flex-start;

        &.-inherit {
            gap: var(--cluster-gap, var(--spacing-base));
        }

        &.-centered {
            align-items: center;
        }

        &.-nowrap {
            flex-wrap: nowrap;
        }

        &.-between {
            justify-content: space-between;
        }
    }

    .nc-with-sidebar {
        inline-size: 100%;
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        gap: var(--spacing-far);

        & > [data-aside] {
            flex-grow: 1;
            min-width: min-content;
            flex-basis: var(--with-sidebar-target-width, 20rem);
        }

        & > [data-grow] {
            flex-basis: 0;
            flex-grow: 999;
            min-width: var(--with-sidebar-min-size, 50%);
        }

        &.-inherit {
            gap: var(--with-sidebar-gap, var(--spacing-far));
        }

        &[data-direction='rtl'] {
            flex-direction: row-reverse;
        }
    }

    /* AUTO GRID
    Related Every Layout: https://every-layout.dev/layouts/grid/
    More info on the flexible nature: https://piccalil.li/tutorial/create-a-responsive-grid-layout-with-no-media-queries-using-css-grid/
    A flexible layout that will create an auto-fill grid with
    configurable grid item sizes

    CUSTOM PROPERTIES AND CONFIGURATION
    --gutter (var(--space-s-m)): This defines the space
    between each item.

    --grid-min-item-size (14rem): How large each item should be
    ideally, as a minimum.

    --grid-placement (auto-fill): Set either auto-fit or auto-fill
    to change how empty grid tracks are handled
    */
    .nc-grid {
        display: grid;
        grid-template-columns: repeat(
            var(--grid-placement, auto-fill),
            minmax(var(--grid-min-item-size, 16rem), 1fr)
        );
        gap: var(--spacing-base);

        /* A split 50/50 layout */

        &[data-layout='50-50'] {
            --grid-placement: auto-fit;
            --grid-min-item-size: clamp(16rem, 50vw, 33rem);
        }

        /* Three column grid layout */

        &[data-layout='thirds'] {
            --grid-placement: auto-fit;
            --grid-min-item-size: clamp(16rem, 33%, 20rem);
        }
    }

    /*
    SWITCHER
    More info: https://every-layout.dev/layouts/switcher/
    A layout that allows you to lay **2** items next to each other
    until there is not enough horizontal space to allow that.

    CUSTOM PROPERTIES AND CONFIGURATION
    --gutter (var(--space-size-1)): This defines the space
    between each item

    --switcher-target-container-width (40rem): How large the container
    needs to be to allow items to sit inline with each other

    --switcher-vertical-alignment How items should align vertically.
    Can be any acceptable flexbox alignment value.
    */
    .nc-switcher {
        display: flex;
        flex-wrap: wrap;
        gap: var(--spacing-base);
        align-items: var(--switcher-vertical-alignment, flex-start);

        & > * {
            flex-grow: 1;
            flex-basis: calc((var(--switcher-target-container-width, 40rem) - 100%) * 999);
        }

        /* Max 2 items,
        so anything greater than 2 is ful width */

        & > :nth-child(n + 3) {
            flex-basis: 100%;
        }
    }

    :where(.nc-stack, .nc-cluster, .nc-with-sidebar, .nc-grid) {
        &.-tiny {
            gap: var(--spacing-tiny);
        }

        &.-nearest {
            gap: var(--spacing-nearest);
        }

        &.-near {
            gap: var(--spacing-near);
        }

        &.-base {
            gap: var(--spacing-base);
        }

        &.-far {
            gap: var(--spacing-far);
        }

        &.-farthest {
            gap: var(--spacing-farthest);
        }

        &.-nogap {
            gap: 0;
        }
    }

    .full-width {
        inline-size: 100%;
    }

    .nc-centered-content {
        display: grid;
        place-items: center;
    }
}
